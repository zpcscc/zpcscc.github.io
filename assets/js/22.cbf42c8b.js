(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{514:function(s,a,e){"use strict";e.r(a);var t=e(5),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"jest-基础介绍"}},[s._v("Jest 基础介绍")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Jest 是一个令人愉快的 JavaScript 测试框架，专注于 简洁明快。\nJest 是一个 JavaScript 测试框架，旨在确保任何 JavaScript 代码的正确性。\n它为你提供了 易于理解、熟悉且功能丰富的 API 来编写测试用例，并快速地反馈结果。\nJest 拥有良好的文档，只需很少的配置，并能 根据你的需求进行扩展。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"零配置"}},[s._v("零配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Jest 的目标是在大部分 JavaScript 项目上实现开箱即用， 无需配置。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"快照"}},[s._v("快照")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("能够轻松追踪大型对象的测试。 快照可以与测试代码放在一起，也可以集成进代码 行内。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"隔离"}},[s._v("隔离")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("测试程序拥有自己独立的进程 以最大限度地提高性能。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"优秀的-api"}},[s._v("优秀的 api")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("从 “it” 到 “expect” - Jest 将整个工具包放在同一个 地方。好书写、好维护、非常方便。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"fast-and-safe"}},[s._v("FAST AND SAFE")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("通过确保你的测试具有独一无二的全局状态，Jest 可以 可靠地并行运行测试。\n为了让测试进程加速 会先运行先前失败的测试， 并根据测试文件的耗时重新组织测试顺序。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"code-coverage"}},[s._v("CODE COVERAGE")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("通过添加 “--coverage” 标志生成代码覆盖率报告， 无需额外设置。\nJest 可以从 整个项目收集代码覆盖面信息，包括未经测试的文件。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"easy-mocking"}},[s._v("EASY MOCKING")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Jest 在测试中针对 import 使用自定义解析器， 这让模拟测试范围之外的任何对象都变得容易。 \n你可以将模拟的 import 和丰富的 Mock 函数 API 一起使用，用于监视函数调用并获得可读的测试语法。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"great-exceptions"}},[s._v("GREAT EXCEPTIONS")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("当测试失败时，Jest 提供了丰富的上下文帮助你找出原因。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);