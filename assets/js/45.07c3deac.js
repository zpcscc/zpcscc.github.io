(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{540:function(t,s,a){"use strict";a.r(s);var n=a(5),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浅谈-javascript-运行机制"}},[t._v("浅谈 JavaScript 运行机制")]),t._v(" "),a("p",[t._v("​ 想要了解一门语言，最好的办法就是了解它的运行机制。掌握了运行机制，能够让我们在开发中少走许多弯路，写出高质量的代码。本文简单介绍什么是 JavaScript 的运行机制，给刚刚接触 JavaScript 的小白一个初步的了解，为将来打好基础。")]),t._v(" "),a("h2",{attrs:{id:"一、javascript-代码运行分两个阶段"}},[t._v("一、JavaScript 代码运行分两个阶段：")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("预解析")]),t._v("---把所有的函数定义提前，所有的变量声明提前，变量的赋值不提前")]),t._v(" "),a("p",[t._v("2、"),a("strong",[t._v("执行")]),t._v("---从上到下执行（按照 js 运行机制）")]),t._v(" "),a("h2",{attrs:{id:"二、javascript-运行机制的特点"}},[t._v("二、JavaScript 运行机制的特点")]),t._v(" "),a("p",[t._v("1.JavaScript 是一门"),a("strong",[t._v("单线程语言")])]),t._v(" "),a("p",[t._v("2."),a("strong",[t._v("事件循环")]),t._v("（Event Loop）")]),t._v(" "),a("h2",{attrs:{id:"三、单线程"}},[t._v("三、单线程")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是单线程"}},[t._v("1.什么是单线程")]),t._v(" "),a("p",[t._v("JavaScript 的一个语言特性（也是这门语言的核心）就是单线程，也就是说，同一个时间只能做一件事，当有多个任务时，只能按照顺序上一个任务完成了再执行下一个。上一个任务未完成则会一直等待。\nJavaScript 所有的多线程都是模拟出来的，本质还是单线程")]),t._v(" "),a("h3",{attrs:{id:"_2-为什么-javascript-是单线程"}},[t._v("2.为什么 JavaScript 是单线程")]),t._v(" "),a("p",[t._v("JavaScript 的单线程而不是多线程，主要与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM（文档对象模型）和 BOM（浏览器对象模型）。而多线程需要共享资源，多线程编程经常面临锁、状态同步等问题。这决定了 JavaScript 只能是单线程。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？会带来许多问题\n所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征，将来也不会改变。")]),t._v(" "),a("h3",{attrs:{id:"_3-单线程带来的问题及解决方法"}},[t._v("3.单线程带来的问题及解决方法")]),t._v(" "),a("p",[t._v("单线程意味着同一时间只能进行一件事情,前面的事情结束才能执行后面的事件.当碰到需要时间的 IO 事件的时候问题就来了,必须等到这些结束后才往下进行但这时 CPU 是闲着的.这样浪费了很多计算机的性能\nJavaScript 语言的设计者意识到，这时主线程完全可以不管 IO 设备，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 设备返回了结果，再回过头，挂起的任务继续执行下去。将所有任务分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）\n为了提高 CPU 的利用率，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以这个标准并没有改变 JavaScript 单线程的本质")]),t._v(" "),a("h2",{attrs:{id:"四、同步和异步"}},[t._v("四、同步和异步")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('同步：\n\t在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；\n异步：\n\t不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("strong",[t._v("例题：")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1 3 2 ---不是按照123的先后顺序输出。因为延时器触发了异步")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A ---遇到死循环，程序卡在死循环。后面的语句执不了")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A----只输出A，延时器异步等主线程结束后执行，主线程遇到死循环，后面的不再执行")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"五、理解-event-loop-事件循环"}},[t._v("五、理解 Event Loop（事件循环）")]),t._v(" "),a("p",[a("strong",[t._v("异步执行")]),t._v("的"),a("strong",[t._v("运行机制")]),t._v("如下：理解"),a("strong",[t._v("任务队列")]),t._v("（消息队列）")]),t._v(" "),a("p",[t._v("（1）所有同步任务都在主线程上执行，形成一个"),a("strong",[t._v("执行栈")]),t._v("（execution context stack）")]),t._v(" "),a("p",[t._v('（2）主线程之外，还存在一个"'),a("strong",[t._v("任务队列")]),t._v('"（task queue）。只要异步任务有了运行结果，就在"'),a("strong",[t._v("任务队列")]),t._v('"之中放置一个事件')]),t._v(" "),a("p",[t._v('（3）一旦"'),a("strong",[t._v("执行栈")]),t._v('"中的所有同步任务执行完毕，系统就会读取"'),a("strong",[t._v("任务队列")]),t._v('"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入'),a("strong",[t._v("执行栈")]),t._v("，开始执行")]),t._v(" "),a("p",[t._v("（4）主线程不断重复上面的第三步")]),t._v(" "),a("p",[t._v("​ "),a("strong",[t._v("JavaScript 的运行机制")]),t._v('：主线程从"'),a("strong",[t._v("任务队列")]),t._v('"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为'),a("strong",[t._v("Event Loop（事件循环）")]),t._v('。只要主线程空了，就会去读取"'),a("strong",[t._v("任务队列")]),t._v('"。这个过程会循环反复。以下这张图可以很好说明这点。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/dxsixpc/myImg@master/img/20200813163235.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"六、哪些语句会放入异步任务队列"}},[t._v("六、哪些语句会放入异步任务队列")]),t._v(" "),a("p",[a("strong",[t._v("一般来说，有以下四种会放入异步任务队列：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("setTimeout（延时器）和 setInterval（定时器）")])]),t._v(" "),a("li",[a("p",[t._v("DOM 事件")])]),t._v(" "),a("li",[a("p",[t._v("ES6 中的 Promise")])]),t._v(" "),a("li",[a("p",[t._v("Ajax 异步请求")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);